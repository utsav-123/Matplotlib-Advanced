import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

# Data from the provided dictionaries
nse = {
    'GCM': ['ACCESS-CM2', 'ACCESS-ESM1-5', 'BCC-CSM2-MR', 'CanESM5', 'EC-Earth3', 'EC-Earth3-Veg', 'INM-CM4-8',
            'INM-CM5-0', 'MPI-ESM1-2-HR', 'MPI-ESM1-2-LR', 'MRI-ESM2-0', 'NORESM2-LM', 'NorESM2-MM'],
    '1406_PCP': [0.079888, 0.390852, 0.563668, -0.187842, 0.280537, -0.159950, 0.028411, 0.048035, 0.385417, 0.288868, 0.312350, 0.193617, 0.374565],
    '1407_PCP': [0.204602, 0.426588, 0.583585, 0.006063, 0.367587, 0.408419, 0.276894, 0.149798, 0.437592, 0.396671, 0.373853, 0.222995, 0.456155],
    '1408_PCP': [0.199186, 0.441583, 0.508471, -0.063193, 0.466693, 0.450628, 0.207670, 0.104448, 0.550516, 0.443032, 0.316117, 0.197269, 0.554624],
    '1409_PCP': [0.285793, 0.500356, 0.609274, -0.088028, 0.551667, 0.529015, 0.169338, 0.133452, 0.590408, 0.517882, 0.400509, 0.331749, 0.617529],
    '1410_PCP': [0.302923, 0.553059, 0.665192, 0.032583, 0.504128, 0.518181, 0.215417, 0.199338, 0.603613, 0.537533, 0.503501, 0.334003, 0.571618],
    '1415_PCP': [0.229727, 0.472890, 0.584179, -0.093757, 0.492607, 0.526412, 0.245959, 0.092359, 0.574280, 0.514301, 0.405620, 0.255100, 0.590465],
    '1416_PCP': [0.292219, 0.560532, 0.651940, 0.072654, 0.513660, 0.512860, 0.238530, 0.207369, 0.559716, 0.570855, 0.465235, 0.322817, 0.574474],
    '1419_PCP': [0.194559, 0.477417, 0.580654, -0.127191, 0.264569, -0.049181, 0.019184, 0.070332, 0.420557, 0.275323, 0.360026, 0.135831, 0.354261],
    '1407_Tmax': [0.831704, 0.838459, 0.800409, 0.764026, 0.781575, 0.780684, 0.763202, 0.778668, 0.824773, 0.751609, 0.792457, 0.835737, 0.800533],
    '1407_Tmin': [0.842441, 0.848278, 0.821282, 0.812720, 0.822488, 0.857415, 0.823329, 0.869841, 0.861297, 0.817976, 0.852301, 0.855795, 0.868512],
    '1416_Tmax': [0.855087, 0.840091, 0.838786, 0.771551, 0.788638, 0.773300, 0.782276, 0.809536, 0.843872, 0.773447, 0.793174, 0.833693, 0.831749],
    '1416_Tmin': [0.885361, 0.892914, 0.869310, 0.870023, 0.871763, 0.892393, 0.871087, 0.901612, 0.883998, 0.877678, 0.884146, 0.888012, 0.908359],
    '1421_Tmax': [0.846073, 0.839069, 0.794723, 0.777811, 0.754990, 0.759812, 0.769231, 0.789505, 0.841886, 0.766767, 0.813099, 0.825454, 0.813991],
    '1421_Tmin': [0.909476, 0.905007, 0.899576, 0.901868, 0.899930, 0.911084, 0.897450, 0.915148, 0.907381, 0.892833, 0.905666, 0.905192, 0.920623]
}

pbias = {
    'GCM': ['ACCESS-CM2', 'ACCESS-ESM1-5', 'BCC-CSM2-MR', 'CanESM5', 'EC-Earth3', 'EC-Earth3-Veg', 'INM-CM4-8',
            'INM-CM5-0', 'MPI-ESM1-2-HR', 'MPI-ESM1-2-LR', 'MRI-ESM2-0', 'NORESM2-LM', 'NorESM2-MM'],
    '1406_PCP': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1407_PCP': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1408_PCP': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1409_PCP': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1410_PCP': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1415_PCP': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1416_PCP': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1419_PCP': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1407_Tmax': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1407_Tmin': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1416_Tmax': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1416_Tmin': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1421_Tmax': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    '1421_Tmin': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}

r2 = {
    'GCM': ['ACCESS-CM2', 'ACCESS-ESM1-5', 'BCC-CSM2-MR', 'CanESM5', 'EC-Earth3', 'EC-Earth3-Veg', 'INM-CM4-8',
            'INM-CM5-0', 'MPI-ESM1-2-HR', 'MPI-ESM1-2-LR', 'MRI-ESM2-0', 'NORESM2-LM', 'NorESM2-MM'],
    '1406_PCP': [0.425142, 0.545758, 0.624678, 0.372091, 0.505766, 0.379771, 0.424159, 0.441438, 0.546810, 0.497960, 0.499751, 0.475969, 0.543524],
    '1407_PCP': [0.419858, 0.506287, 0.610558, 0.366646, 0.467979, 0.499225, 0.477973, 0.413011, 0.510143, 0.488287, 0.472307, 0.416879, 0.527619],
    '1408_PCP': [0.432653, 0.537401, 0.559381, 0.353914, 0.538197, 0.527556, 0.443980, 0.415896, 0.597370, 0.524151, 0.446459, 0.420885, 0.605122],
    '1409_PCP': [0.486478, 0.584802, 0.645383, 0.356717, 0.606516, 0.589931, 0.435849, 0.446059, 0.633120, 0.581764, 0.508554, 0.493627, 0.657081],
    '1410_PCP': [0.502711, 0.619542, 0.696367, 0.419056, 0.588262, 0.602324, 0.477464, 0.478700, 0.655634, 0.609156, 0.589133, 0.507013, 0.636414],
    '1415_PCP': [0.465872, 0.566634, 0.626020, 0.357902, 0.565366, 0.591694, 0.478981, 0.450217, 0.621235, 0.584073, 0.523681, 0.491504, 0.635819],
    '1416_PCP': [0.485185, 0.598976, 0.666496, 0.411693, 0.579970, 0.591799, 0.477467, 0.475007, 0.643902, 0.604105, 0.557978, 0.492742, 0.634798],
    '1419_PCP': [0.428828, 0.534476, 0.615524, 0.341634, 0.480359, 0.406169, 0.420313, 0.467102, 0.574151, 0.528329, 0.494744, 0.461220, 0.575794],
    '1407_Tmax': [0.832073, 0.838457, 0.799358, 0.761469, 0.778696, 0.777504, 0.760651, 0.776056, 0.824845, 0.750875, 0.792547, 0.835181, 0.800533],
    '1407_Tmin': [0.843242, 0.849410, 0.820941, 0.811618, 0.822165, 0.856614, 0.823550, 0.868731, 0.860703, 0.818404, 0.852981, 0.855559, 0.868765],
    '1416_Tmax': [0.855754, 0.840915, 0.839572, 0.771901, 0.788947, 0.773553, 0.782776, 0.809601, 0.843665, 0.773582, 0.793429, 0.834022, 0.831743],
    '1416_Tmin': [0.885981, 0.892960, 0.868245, 0.869853, 0.871538, 0.892784, 0.870585, 0.901501, 0.883489, 0.877457, 0.883816, 0.887863, 0.908634],
    '1421_Tmax': [0.845832, 0.839454, 0.793397, 0.776046, 0.754606, 0.759830, 0.769145, 0.789289, 0.841490, 0.766493, 0.812893, 0.824252, 0.813932],
    '1421_Tmin': [0.909354, 0.904949, 0.899421, 0.901708, 0.899710, 0.911073, 0.896977, 0.915056, 0.907243, 0.892898, 0.905329, 0.905013, 0.920512]
}


# Rating function for each metric
def rate_nse(nse):
    if nse >= 0.75:
        return 5
    elif nse >= 0.5:
        return 4
    elif nse >= 0.25:
        return 3
    elif nse >= 0:
        return 2
    else:
        return 1

def rate_pbias(pbias):
    if -10 <= pbias <= 10:
        return 5
    elif -20 <= pbias < -10 or 10 < pbias <= 20:
        return 4
    elif -30 <= pbias < -20 or 20 < pbias <= 30:
        return 3
    elif -40 <= pbias < -30 or 30 < pbias <= 40:
        return 2
    else:
        return 1

def rate_r2(r2):
    if r2 > 0.90:
        return 5
    elif r2 >= 0.80:
        return 4
    elif r2 >= 0.70:
        return 3
    elif r2 >= 0.50:
        return 2
    else:
        return 1

# DataFrames for each dictionary
nse_df = pd.DataFrame(nse).set_index('GCM')
pbias_df = pd.DataFrame(pbias).set_index('GCM')
r2_df = pd.DataFrame(r2).set_index('GCM')
# Create performance rating DataFrame
performance_rating = pd.DataFrame(index=nse_df.index)

for station in nse_df.columns:
    # Calculate performance rating for each metric (NSE, PBIAS, R2) and average them
    performance_rating[station] = (
        nse_df[station].apply(rate_nse) +
        pbias_df[station].apply(rate_pbias) +
        r2_df[station].apply(rate_r2)
    ) / 3  # Average the ratings

# Function to create a heatmap
def create_heatmap(data, ax, title, vmin, vmax):
    sns.heatmap(data, cmap="RdYlBu", annot=False, fmt='.2f', ax=ax, vmin=vmin, vmax=vmax,linewidths=0.5, linecolor='black')
    ax.set_title(title, fontsize=14)
    ax.set_xlabel('GCMs', fontsize=9)
    ax.set_ylabel('Stations', fontsize=9)
    
# Plotting
fig, axes = plt.subplots(2, 2, figsize=(12, 12))

# Flatten axes array for easy indexing
axes = axes.flatten()

# NSE heatmap
create_heatmap(nse_df.transpose(),axes[0], 'NSE', vmin=-0.3, vmax=1)

# PBIAS heatmap
create_heatmap(pbias_df.transpose(), axes[1], 'PBIAS', vmin=-30, vmax=30)

# R2 heatmap
create_heatmap(r2_df.transpose(), axes[2], 'R2', vmin=0, vmax=1)

# Performance rating heatmap
create_heatmap(performance_rating.transpose(), axes[3], 'Performance Rating', vmin=1, vmax=5)

# Adjust the spacing between subplots
plt.subplots_adjust(wspace=1.2, hspace=3)

# Visualize the plot
plt.tight_layout()
plt.show()

# Save the plots
fig.savefig("Rating Summary.png", dpi = 600)

# Compute the average performance rating for each GCM model across all stations
gcm_performance_avg = performance_rating.mean(axis=1)

# Sort the GCM models by their average performance rating in descending order
top_6_gcm = gcm_performance_avg.sort_values(ascending=False).head(6)

# Display the top 6 best-performing GCM models
print("Top 6 Best Performing GCM Models:")
print(top_6_gcm)
